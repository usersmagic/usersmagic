extends ../partials/head
block content
  input.display-none#questions(type="text" value=JSON.stringify(questions))
  input.display-none#submition(type="text" value=JSON.stringify(submition))
  span.open-answer-type.display-none= __('open_answer')
  span.multiple-choice-type.display-none= __('multiple_choice')
  span.opinion-scale-type.display-none= __('opinion_scale')
  span.yes-no-type.display-none= __('yes_no')
  span.unknown-error-title.display-none= __('An unknown error occured')
  span.try-again-later-text.display-none= __('Please try again later. If the problem continues, contact us at hello@usersmagic.com.')
  span.okay-text.display-none= __('Okay')
  span.confirm-text.display-none= __('Confirm')
  span.cancel-text.display-none= __('Cancel')
  span.your-answer.display-none= __('Your answer')
  span.required.display-none= __('Required')
  span.not-required.display-none= __('Not required')
  span.no.display-none= __('NO')
  span.yes.display-none= __('YES')
  span.clear-answers.display-none= __('Clear answers')
  span.are-you-sure-title.display-none= __('Are you sure you want to continue?')
  span.no-update-after-submit-text.display-none= __('You cannot edit or delete your answers once you submit your test. Thank you :)')
  .all-wrapper
    .welcome-page-outer-wrapper(style=(submition.last_question == -1 ? 'display: flex;' : 'display: none;'))
      .welcome-page-wrapper
        span.welcome-title #{__('Welcome to your new survey')}
        .welcome-steps-wrapper
          .welcome-step-wrapper
            span.welcome-step-number 1
            span.welcome-step-text #{__('There is no right or wrong! Just be honest along the way')}
          .welcome-step-wrapper
            span.welcome-step-number 2
            span.welcome-step-text #{__('Your answers are valuable, be as detailed as possible')}
          .welcome-step-wrapper
            span.welcome-step-number 3
            span.welcome-step-text #{__('Your privacy is valuable! Your answers will always be anonymous')}
        .welcome-button-wrapper
          .general-seablue-button.go-instructions-button
            span #{__('Go to instructions')}
      .welcome-page-wrapper(style="display: none;")
        span.welcome-campaign-name= campaign.name
        span.welcome-title #{__('Instructions')}
        span.welcome-campaign-instructions-opening= campaign.welcome_screen.opening
        span.welcome-campaign-instructions= campaign.welcome_screen.details
        if campaign.welcome_screen.image && campaign.welcome_screen.image.length
          .welcome-campaign-instructions-image
            img(src=campaign.welcome_screen.image alt="usersmagic " + campaign.name)
        .welcome-button-wrapper
          .general-seablue-button.start-test-button
            span #{__('Start your test')}
    .finish-page-outer-wrapper(style=(submition.last_question == campaign.questions.length ? 'display: flex;' : 'display: none;'))
      .finish-page-wrapper
        span.finish-page-title #{__('Your Answers')}:
        .finish-page-questions-wrapper
          each question, i in questions
            .finish-page-each-question-wrapper(style=(i == 0 ? 'padding-top: 0px;' : ''))
              span.finish-page-each-question-text #{i+1}. #{question.question.text}
              if question.question.type == 'multiple_choice' &&Â question.question.subtype != 'multiple'
                each answer in question.answer
                  span.finish-page-each-question-answer - #{answer}
              else if question.question.type == 'yes_no'
                span.finish-page-each-question-answer #{__(question.answer.toUpperCase())}
              else
                span.finish-page-each-question-answer= question.answer
        .finish-page-buttons-wrapper
          .general-seablue-border-button.finish-page-back-button
            span= __('Back')
          .general-seablue-button.finish-page-submit-button
            span= __('Submit')
    .question-outer-wrapper(style=((submition.last_question != campaign.questions.length && submition.last_question != -1) ? 'display: flex;' : 'display: none;'))
      .back-button
        i.fas.fa-arrow-left
      .question-wrapper
        if submition.last_question > -1 && submition.last_question < questions.length
          .question-progress-bar
            .question-progress-bar-inner-line
          .question-info-wrapper
            span.question-type #{__(questions[submition.last_question].question.type)}
            if questions[submition.last_question].question.required
              span.question-required #{__('Required')}
            else
              span.question-required #{__('Not required')}
          span.question-text= questions[submition.last_question].question.text
          if questions[submition.last_question].question.type == 'yes_no'
            .each-question-yesno-buttons-wrapper
              .each-question-no-button(class=(questions[submition.last_question].answer == "no" ? "selected-no-button" : ""))
                i.fas.fa-times
                span= __('NO')
              .each-question-yes-button(class=(questions[submition.last_question].answer == "yes" ? "selected-yes-button" : ""))
                i.fas.fa-check
                span= __('YES')
          else if questions[submition.last_question].question.type == 'open_answer'
            textarea.general-input-with-border-long.answer-input(type="text" placeholder="Your answer")= questions[submition.last_question].answer
          else if questions[submition.last_question].question.type == 'opinion_scale'
            .each-question-opinion-outer-wrapper
              .each-question-opinion-scale-wrapper
                - for (let i = questions[submition.last_question].question.range.min; i <= questions[submition.last_question].question.range.max; i++)
                  if i != questions[submition.last_question].question.range.min
                    .each-question-empty-scale
                  if questions[submition.last_question].answer == i
                    span.each-question-each-scale.each-question-selected-scale= i
                  else
                    span.each-question-each-scale= i
              .each-question-opinion-line
                .each-question-opinion-line-item
                .each-question-opinion-line-item
                .each-question-opinion-line-item
              .each-question-opinion-text-wrapper
                span.each-question-opinion-text-left= questions[submition.last_question].question.labels.left
                span.each-question-opinion-text-middle= questions[submition.last_question].question.labels.middle
                span.each-question-opinion-text-right= questions[submition.last_question].question.labels.right
          else if questions[submition.last_question].question.type == 'multiple_choice'
            if questions[submition.last_question].question.subtype == 'single'
              each choice in questions[submition.last_question].question.choices
                .each-question-choice.each-question-choice-radio
                  if choice == questions[submition.last_question].answer
                    .radio-choice-wrapper.selected-choice
                      .radio-choice-icon
                  else
                    .radio-choice-wrapper
                      .radio-choice-icon
                  span= choice
            else if questions[submition.last_question].question.subtype == 'multiple'
              each choice in questions[submition.last_question].question.choices
                .each-question-choice.each-question-choice-checked
                  if questions[submition.last_question].answer.includes(choice)
                    .checked-choice-wrapper.selected-choice
                      i.checked-choice-icon.fas.fa-check
                  else
                    .checked-choice-wrapper
                      i.checked-choice-icon.fas.fa-check
                  span= choice
          span.clear-question-button= __('Clear answers')
      .next-button(style=((submition.last_question > -1 && submition.last_question < questions.length && questions[submition.last_question].question.required) ? "" : "cursor: pointer"))
        i.fas.fa-arrow-right
